#!/usr/bin/env python

import sys
import os
import platform


CORE_DIR = os.path.dirname(os.path.realpath(__file__))
V_DIR="venv"


def get_platform():
    plat = platform.system().lower()

    if plat == 'linux' and platform.linux_distribution()[0].lower() == 'debian':
        try:
            with open('/proc/cpuinfo') as f:
                for line in f:
                    line = line.strip().split()
                    if len(line) < 2:
                        continue

                    if line[0] == 'Hardware' and line[-1] in ['BCM2708', 'BCM2709']:
                        return 'raspberry-pi'
        except:
            pass

    return plat


def get_file_path(f):
    return "%s/%s" % (CORE_DIR, f)


def print_color(s, color="yellow"):
    colors = ["black", "red", "green", "yellow", "blue", "magenta", "cyan", "white"]
    color = color.lower()

    if color in colors:
        color_num = colors.index(color)
        os.system("tput setaf %d 2>/dev/null" % color_num)
        print s
        os.system("tput sgr0 2>/dev/null")
    else:
        print s


def run_commands(commands):
    for com in commands:
        print_color("\nRunning: %s \n" % com, color="cyan")
        if os.system(com) != 0:
            print_color("\n Non-zero error code running: \nStopping install." % com, color="red")
            sys.exit()


def startVenv():
    venv_real_dir = get_file_path(V_DIR)

    if not os.path.isdir(venv_real_dir):
        print_color("\nCreating virtual env in %s..." % V_DIR)
        run_commands(["virtualenv %s" % venv_real_dir])

    # Activate the virtual env
    print_color("\nActivating virtual env...")
    activate_file = venv_real_dir + "/bin/activate_this.py"
    try:
        execfile(activate_file, dict(__file__=activate_file))
    except Exception as e:
        print_color(e.message, color="red")
        print_color("\nError activating virtualenv", color="red")
        sys.exit()


def install(args):
    is_ras_pi = False

    # if argument is passed and it's valid, set is_ras_pi if it's --pi
    if len(args) > 0 and args[0] in ['--pi', '--dev']:
        is_ras_pi = (args[0] == '--pi')

    # Otherwise autodetect
    else:
        platform = get_platform()
        if platform not in ['linux', 'raspberry-pi']:
            print_color("\nInstalls on non linux systems are not supported yet! :(", color="red")
            sys.exit()

        is_ras_pi = (platform == 'raspberry-pi')

    if is_ras_pi:
        print_color("\nInstalling componenents for Raspberry Pi")
    else:
        print_color("\nInstalling componenents for dev system")

    # Check if we have root access
    if os.geteuid() != 0:
        print_color("\nYou don't have permissions to install items. Exiting", color="red")
        sys.exit()

    install_items = []

    # install basic things
    with open(get_file_path("install/apt-get.txt")) as f:
        basic_install_items = f.read().split("\n")[:-1]
        install_items.extend(basic_install_items)

    # install ras pi things
    if is_ras_pi:
        with open(get_file_path("install/apt-get-hw.txt")) as f:
            pi_install_items = f.read().split("\n")[:-1]
            install_items.extend(pi_install_items)

    install_command = [
        "apt-get install -y " + " ".join(install_items),
        "pip install --upgrade pip",
        "pip install --upgrade virtualenv",
    ]

    run_commands(install_command)

    print_color("\nInstalling and activating virtual env")
    startVenv()

    commands_to_run = []

    commands_to_run.append(
        "pip install -r %s" % get_file_path("requirements.txt")
    )

    if is_ras_pi:
        commands_to_run.append(
            "pip install -r %s" % get_file_path("requirements-hw.txt")
        )

    run_commands(commands_to_run)

    if os.environ['SUDO_USER']:
        print_color("\nRunning with sudo, so chown the venv dir to the sudo user.")
        command = "chown -R {user}:{user} {dir}".format(user=os.environ['SUDO_USER'],
                                                        dir=get_file_path("venv"))
        run_commands([command])

    if is_ras_pi:
        i2c_enabled = os.system("i2cdetect -y 1 > /dev/null 2>&1")
        if i2c_enabled != 0:
            print_color("\ni2c is not enabled. Will run raspi-config to enable the device.")
            print_color("Enable in Advanced Options > i2c")
            print_color("\nEnter n to skip, or any other key to continue and launch raspi-config [Y/n]:")

            if raw_input().lower() != 'n':
                run_commands(["raspi-config"])
                print_color("\nYou may have to reboot to fully enable i2c")

    print_color("\nFinished Install!\n", color="green")

def run(args):
    if '--rov' in args:
        print_color("Running ROV main loop:\n")
        os.system("python %s/rov/rov.py" % CORE_DIR)
    else:
        print_color("Running full ROV stack:\n")
        os.environ["FLASK_APP"] = "%s/application.py" % CORE_DIR
        os.system("flask run --host=0.0.0.0")

def usage():
    print "scotty install [--pi] [--dev]"
    print "   Installs requried files. Autodetects install type"
    print "   --pi:   Install as if this is a Pi"
    print "   --dev:  Install as if this is a dev machine"
    print ""
    print "scotty run [--rov]"
    print "   Runs the full ROV stack"
    print "   --rov:  Just test the ROV main loop"

def main():
    availabe_commands = {
        "install": install,
        "run": run
    }

    if len(sys.argv) <=1:
        usage()
        return

    command = sys.argv[1]

    if command not in availabe_commands:
        print_color("%s is not an availabe command\n" % command, color="red")
        usage()
        return

    availabe_commands[command](sys.argv[2:])


if __name__ == '__main__':
    main()
